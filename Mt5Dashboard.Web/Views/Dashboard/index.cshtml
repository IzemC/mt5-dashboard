@model Mt5Dashboard.Core.Models.Account

@{
    ViewData["Title"] = "MT5 Account Dashboard";
}

@{
    var culture = Model.Currency switch
    {
        "USD" => new System.Globalization.CultureInfo("en-US"),
        _ => System.Globalization.CultureInfo.InvariantCulture
    };
}


<div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-gradient-to-r from-indigo-600 to-indigo-800 text-white shadow-xl rounded-xl mx-4 p-6 transition-all duration-300 hover:shadow-2xl hover:-translate-y-1">
        <div class="flex flex-col md:flex-row justify-between items-start md:items-center">
            <div>
                <h1 class="text-3xl font-bold mb-2">MT5 Account Dashboard</h1>
                <div class="flex flex-wrap items-center gap-4">
                    <div class="flex items-center">
                        <span class="relative flex h-3 w-3 mr-2">
                            <span class="animate-ping absolute inline-flex h-full w-full rounded-full @(Model.Status == "Active" ? "bg-emerald-400" : "bg-rose-400") opacity-75"></span>
                            <span class="relative inline-flex rounded-full h-3 w-3 @(Model.Status == "Active" ? "bg-emerald-500" : "bg-rose-500")"></span>
                        </span>
                        <span class="font-medium">Account #@Model.AccountId</span>
                    </div>
                    <div class="flex items-center text-indigo-100">
                        <i class="far fa-clock mr-2"></i>
                        <span>Last login: @Model.LastLogin.ToString("f")</span>
                    </div>
                    <span class="px-3 py-1 rounded-full text-xs font-semibold bg-indigo-500 text-white">
                        Open Trades: @Model.OpenTradesCount
                    </span>
                </div>
            </div>
            <div class="mt-4 md:mt-0 flex space-x-2">
                <button class="px-4 py-2 bg-white/10 hover:bg-white/20 rounded-lg transition-colors duration-200 flex items-center">
                    <i class="fas fa-sync-alt mr-2"></i> Refresh
                </button>
                <button class="px-4 py-2 bg-white/20 hover:bg-white/30 rounded-lg transition-colors duration-200 flex items-center">
                    <i class="fas fa-cog mr-2"></i> Settings
                </button>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mx-4 mt-6">
        <!-- Balance Card -->
        <div class="bg-white rounded-xl shadow-md overflow-hidden transition-all duration-300 hover:shadow-lg hover:-translate-y-1 border-l-4 border-indigo-500">
            <div class="p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-gray-500 text-sm font-medium">BALANCE</p>
                        <h3 class="text-2xl font-bold mt-1">@Model.Balance.ToString("C", culture)</h3>
                    </div>
                    <div class="bg-indigo-100 p-3 rounded-full">
                        <i class="fas fa-wallet text-indigo-600 text-xl"></i>
                    </div>
                </div>
                <div class="mt-4">
                    <div class="h-2 bg-gray-200 rounded-full overflow-hidden">
                        <div class="h-full bg-indigo-500 rounded-full" style="width: 100%"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Equity Card -->
        <div class="bg-white rounded-xl shadow-md overflow-hidden transition-all duration-300 hover:shadow-lg hover:-translate-y-1 border-l-4 @(Model.Equity >= Model.Balance ? "border-emerald-500" : "border-rose-500")">
            <div class="p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-gray-500 text-sm font-medium">EQUITY</p>
                        <h3 class="text-2xl font-bold mt-1 @(Model.Equity >= Model.Balance ? "text-emerald-600" : "text-rose-600")">
                            @Model.Equity.ToString("C", culture)
                        </h3>
                    </div>
                    <div class="p-3 rounded-full @(Model.Equity >= Model.Balance ? "bg-emerald-100" : "bg-rose-100")">
                        <i class="@(Model.Equity >= Model.Balance ? "fas fa-chart-line text-emerald-600" : "fas fa-chart-line-down text-rose-600") text-xl"></i>
                    </div>
                </div>
                <div class="mt-4">
                    <div class="h-2 bg-gray-200 rounded-full overflow-hidden">
                        <div class="h-full @(Model.Equity >= Model.Balance ? "bg-emerald-500" : "bg-rose-500") rounded-full" 
                             style="width: @((Model.Equity / Model.Balance * 100).ToString("0"))%"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Margin Level Card -->
        <div class="bg-white rounded-xl shadow-md overflow-hidden transition-all duration-300 hover:shadow-lg hover:-translate-y-1 border-l-4 @(Model.MarginLevel > 200 ? "border-emerald-500" : Model.MarginLevel > 100 ? "border-amber-500" : "border-rose-500")">
            <div class="p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-gray-500 text-sm font-medium">MARGIN LEVEL</p>
                        <h3 class="text-2xl font-bold mt-1 @(Model.MarginLevel > 200 ? "text-emerald-600" : Model.MarginLevel > 100 ? "text-amber-600" : "text-rose-600")">
                            @Model.MarginLevel.ToString("F2")%
                        </h3>
                    </div>
                    <div class="p-3 rounded-full @(Model.MarginLevel > 200 ? "bg-emerald-100" : Model.MarginLevel > 100 ? "bg-amber-100" : "bg-rose-100")">
                        <i class="@(Model.MarginLevel > 200 ? "fas fa-shield-check text-emerald-600" : Model.MarginLevel > 100 ? "fas fa-shield text-amber-600" : "fas fa-shield-exclamation text-rose-600") text-xl"></i>
                    </div>
                </div>
                <div class="mt-4">
                    <div class="h-2 bg-gray-200 rounded-full overflow-hidden">
                        <div class="h-full @(Model.MarginLevel > 200 ? "bg-emerald-500" : Model.MarginLevel > 100 ? "bg-amber-500" : "bg-rose-500") rounded-full" 
                             style="width: @(Model.MarginLevel > 200 ? "100" : Model.MarginLevel.ToString("0"))%"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mx-4 my-6">
        <!-- Performance Chart -->
        <div class="lg:col-span-2 bg-white rounded-xl shadow-md overflow-hidden transition-all duration-300 hover:shadow-lg">
            <div class="p-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-xl font-semibold">Performance Overview</h2>
                    <div class="relative">
                        <select class="appearance-none bg-gray-100 border-0 text-gray-700 py-2 pl-3 pr-8 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none">
                            <option>Last 7 Days</option>
                            <option selected>Last 30 Days</option>
                            <option>Last 90 Days</option>
                        </select>
                        <i class="fas fa-chevron-down absolute right-3 top-3 text-gray-500 pointer-events-none"></i>
                    </div>
                </div>
                <div class="h-80">
                    <canvas id="performanceChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="bg-white rounded-xl shadow-md overflow-hidden transition-all duration-300 hover:shadow-lg">
            <div class="p-6">
                <h2 class="text-xl font-semibold mb-6">Quick Actions</h2>
                <div class="space-y-3">
                    <button class="w-full flex items-center justify-center px-4 py-3 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg transition-colors duration-200">
                        <i class="fas fa-plus-circle mr-2"></i> New Trade
                    </button>
                    <button class="w-full flex items-center justify-center px-4 py-3 border border-indigo-600 text-indigo-600 hover:bg-indigo-50 rounded-lg transition-colors duration-200">
                        <i class="fas fa-exchange-alt mr-2"></i> Deposit/Withdraw
                    </button>
                    <button class="w-full flex items-center justify-center px-4 py-3 border border-gray-300 text-gray-700 hover:bg-gray-50 rounded-lg transition-colors duration-200">
                        <i class="fas fa-cog mr-2"></i> Account Settings
                    </button>
                    <button class="w-full flex items-center justify-center px-4 py-3 border border-gray-300 text-gray-700 hover:bg-gray-50 rounded-lg transition-colors duration-200">
                        <i class="fas fa-sign-out-alt mr-2"></i> Logout
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Trades (Placeholder) -->
    <div class="mx-4 mb-6 bg-white rounded-xl shadow-md overflow-hidden transition-all duration-300 hover:shadow-lg">
        <div class="p-6">
            <h2 class="text-xl font-semibold mb-6">Recent Trades</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ticket</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Symbol</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Volume</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Profit</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        <tr class="hover:bg-gray-50 transition-colors duration-150">
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">10001</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">EURUSD</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">1.0</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-emerald-600">+100.20</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                <button class="text-indigo-600 hover:text-indigo-900">View</button>
                            </td>
                        </tr>
                        <tr class="hover:bg-gray-50 transition-colors duration-150">
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">10002</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">GBPUSD</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">0.5</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-rose-600">-45.10</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                <button class="text-indigo-600 hover:text-indigo-900">View</button>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Chart.js Implementation -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animate elements on load
        const animateOnLoad = (elements) => {
            elements.forEach((el, i) => {
                el.style.opacity = '0';
                el.style.transform = 'translateY(20px)';
                el.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                
                setTimeout(() => {
                    el.style.opacity = '1';
                    el.style.transform = 'translateY(0)';
                }, i * 100);
            });
        };
        
        animateOnLoad(document.querySelectorAll('.bg-white'));
        
        // Performance Chart
        const ctx = document.getElementById('performanceChart').getContext('2d');
        const performanceChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
                datasets: [{
                    label: 'Account Growth',
                    data: [5000, 6500, 7200, 8800, 9200, 9500, 9700],
                    borderColor: '#4f46e5',
                    backgroundColor: 'rgba(79, 70, 229, 0.05)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4,
                    pointBackgroundColor: '#4f46e5',
                    pointRadius: 4,
                    pointHoverRadius: 6
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: false,
                        grid: {
                            drawBorder: false
                        },
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            }
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });
    });
</script>